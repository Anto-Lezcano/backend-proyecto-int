// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id               Int              @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String           @unique
  password         String?
  role             Role
  dni              String?
  createdAt        DateTime         @default(now())
  progress         Progress[]
  interactions     Interaction[]
  studentModel     StudentModel?
  resetCode        String?
  resetCodeExpires DateTime?
  isEmailVerified  Boolean          @default(false)
  sessionVersion   Int              @default(0)
}

model Career {
  id              Int              @id @default(autoincrement())
  name            String           
  description     String?
  units           Unit[]
}

model Unit {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  order       Int
  career      Career   @relation(fields: [careerId], references: [id], onDelete: Cascade)
  careerId    Int
  topics      Topic[]
}

model Topic {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  order       Int
  unit        Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId      Int
  progress    Progress[]
}

model Student {
  id Int @id @default(autoincrement())

}



model Progress {
  id        Int      @id @default(autoincrement())
  status    Status
  date      DateTime @default(now())
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   Int
}

model Interaction {
  id         Int      @id @default(autoincrement())
  question   String
  answer     String
  date       DateTime @default(now())
  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  Int

  // ðŸ”¹ Snapshot de probabilidades al momento de la interacciÃ³n
  levelLow    Float   @default(0.0)
  levelMedium Float   @default(0.0)
  levelHigh   Float   @default(0.0)
}

model StudentModel {
  id         Int      @id @default(autoincrement())
  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  Int      @unique
  levelLow   Float    @default(0.0)
  levelMedium Float   @default(0.0)
  levelHigh  Float    @default(0.0)
  lastUpdate DateTime @default(now())
}

model PracticalExam{
  id Int @id @default(autoincrement())
}


enum Role {
  admin
  teacher
  student
}

enum Level {
  low
  medium
  high
}

enum Status {
  pending
  in_progress
  completed
}

enum TestType {
  diagnostic
  theoretical
  practical
}
